"use strict"
//my libs / config
/*
- Q is for async calls. I use promises with a deferred object. Promises can also be managed natively by es6 promises

- config is the mapping used to get the way to process the data, and its path. In a real world case,
this is a config file generated by another software, or directly extracted from a database

- extractor is my lib to retrieve the data
*/

const Q = require("q"),
    config = require("../config/config");
let extractor = require("./extract");

//let's get that data. We don't want any hard-coded id or url to retrieve our data,
//all this is done by the config for reusability
let getbyUserID = function (userID) {
    let d = Q.defer();    
    //for all the cases where we don't have the user ID in our data
    let weCanProcess = Object.keys(config).indexOf(userID) > - 1 ? true : false;
    if (weCanProcess) {
        //All I need is the user ID. My config has been designed in a way that the app can automatically fire the right processing function 
        let extractFunction = config[userID].extractFunction,
            source = config[userID].source;
        //let's initialize our deferred object to return a promise later in this function
        //here we go : we extract our data
        extractor[extractFunction](source)
            .then(function (result) {
                //promise to return
                d.resolve(result);
            })
    } else {
        //error response
        d.resolve({
            error: "favourite not found"
        })
    }
    //promise returned
    return d.promise;
}

module.exports = {
    getbyUserID: getbyUserID
}